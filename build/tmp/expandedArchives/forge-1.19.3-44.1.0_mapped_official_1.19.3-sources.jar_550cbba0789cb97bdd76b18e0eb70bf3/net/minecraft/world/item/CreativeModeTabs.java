package net.minecraft.world.item;

import com.mojang.datafixers.util.Pair;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.Nullable;
import net.minecraft.core.Holder;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.network.chat.Component;
import net.minecraft.tags.InstrumentTags;
import net.minecraft.tags.TagKey;
import net.minecraft.world.entity.raid.Raid;
import net.minecraft.world.flag.FeatureFlagSet;
import net.minecraft.world.flag.FeatureFlags;
import net.minecraft.world.item.alchemy.Potion;
import net.minecraft.world.item.alchemy.PotionUtils;
import net.minecraft.world.item.alchemy.Potions;
import net.minecraft.world.item.enchantment.Enchantment;
import net.minecraft.world.item.enchantment.EnchantmentCategory;
import net.minecraft.world.item.enchantment.EnchantmentInstance;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.LightBlock;
import net.minecraft.world.level.block.SuspiciousEffectHolder;

public class CreativeModeTabs {
   public static final CreativeModeTab BUILDING_BLOCKS = CreativeModeTab.builder(CreativeModeTab.Row.TOP, 0).title(Component.translatable("itemGroup.buildingBlocks")).icon(() -> {
      return new ItemStack(Blocks.BRICKS);
   }).displayItems((p_259897_, p_259444_, p_259072_) -> {
      p_259444_.accept(Items.OAK_LOG);
      p_259444_.accept(Items.OAK_WOOD);
      p_259444_.accept(Items.STRIPPED_OAK_LOG);
      p_259444_.accept(Items.STRIPPED_OAK_WOOD);
      p_259444_.accept(Items.OAK_PLANKS);
      p_259444_.accept(Items.OAK_STAIRS);
      p_259444_.accept(Items.OAK_SLAB);
      p_259444_.accept(Items.OAK_FENCE);
      p_259444_.accept(Items.OAK_FENCE_GATE);
      p_259444_.accept(Items.OAK_DOOR);
      p_259444_.accept(Items.OAK_TRAPDOOR);
      p_259444_.accept(Items.OAK_PRESSURE_PLATE);
      p_259444_.accept(Items.OAK_BUTTON);
      p_259444_.accept(Items.SPRUCE_LOG);
      p_259444_.accept(Items.SPRUCE_WOOD);
      p_259444_.accept(Items.STRIPPED_SPRUCE_LOG);
      p_259444_.accept(Items.STRIPPED_SPRUCE_WOOD);
      p_259444_.accept(Items.SPRUCE_PLANKS);
      p_259444_.accept(Items.SPRUCE_STAIRS);
      p_259444_.accept(Items.SPRUCE_SLAB);
      p_259444_.accept(Items.SPRUCE_FENCE);
      p_259444_.accept(Items.SPRUCE_FENCE_GATE);
      p_259444_.accept(Items.SPRUCE_DOOR);
      p_259444_.accept(Items.SPRUCE_TRAPDOOR);
      p_259444_.accept(Items.SPRUCE_PRESSURE_PLATE);
      p_259444_.accept(Items.SPRUCE_BUTTON);
      p_259444_.accept(Items.BIRCH_LOG);
      p_259444_.accept(Items.BIRCH_WOOD);
      p_259444_.accept(Items.STRIPPED_BIRCH_LOG);
      p_259444_.accept(Items.STRIPPED_BIRCH_WOOD);
      p_259444_.accept(Items.BIRCH_PLANKS);
      p_259444_.accept(Items.BIRCH_STAIRS);
      p_259444_.accept(Items.BIRCH_SLAB);
      p_259444_.accept(Items.BIRCH_FENCE);
      p_259444_.accept(Items.BIRCH_FENCE_GATE);
      p_259444_.accept(Items.BIRCH_DOOR);
      p_259444_.accept(Items.BIRCH_TRAPDOOR);
      p_259444_.accept(Items.BIRCH_PRESSURE_PLATE);
      p_259444_.accept(Items.BIRCH_BUTTON);
      p_259444_.accept(Items.JUNGLE_LOG);
      p_259444_.accept(Items.JUNGLE_WOOD);
      p_259444_.accept(Items.STRIPPED_JUNGLE_LOG);
      p_259444_.accept(Items.STRIPPED_JUNGLE_WOOD);
      p_259444_.accept(Items.JUNGLE_PLANKS);
      p_259444_.accept(Items.JUNGLE_STAIRS);
      p_259444_.accept(Items.JUNGLE_SLAB);
      p_259444_.accept(Items.JUNGLE_FENCE);
      p_259444_.accept(Items.JUNGLE_FENCE_GATE);
      p_259444_.accept(Items.JUNGLE_DOOR);
      p_259444_.accept(Items.JUNGLE_TRAPDOOR);
      p_259444_.accept(Items.JUNGLE_PRESSURE_PLATE);
      p_259444_.accept(Items.JUNGLE_BUTTON);
      p_259444_.accept(Items.ACACIA_LOG);
      p_259444_.accept(Items.ACACIA_WOOD);
      p_259444_.accept(Items.STRIPPED_ACACIA_LOG);
      p_259444_.accept(Items.STRIPPED_ACACIA_WOOD);
      p_259444_.accept(Items.ACACIA_PLANKS);
      p_259444_.accept(Items.ACACIA_STAIRS);
      p_259444_.accept(Items.ACACIA_SLAB);
      p_259444_.accept(Items.ACACIA_FENCE);
      p_259444_.accept(Items.ACACIA_FENCE_GATE);
      p_259444_.accept(Items.ACACIA_DOOR);
      p_259444_.accept(Items.ACACIA_TRAPDOOR);
      p_259444_.accept(Items.ACACIA_PRESSURE_PLATE);
      p_259444_.accept(Items.ACACIA_BUTTON);
      p_259444_.accept(Items.DARK_OAK_LOG);
      p_259444_.accept(Items.DARK_OAK_WOOD);
      p_259444_.accept(Items.STRIPPED_DARK_OAK_LOG);
      p_259444_.accept(Items.STRIPPED_DARK_OAK_WOOD);
      p_259444_.accept(Items.DARK_OAK_PLANKS);
      p_259444_.accept(Items.DARK_OAK_STAIRS);
      p_259444_.accept(Items.DARK_OAK_SLAB);
      p_259444_.accept(Items.DARK_OAK_FENCE);
      p_259444_.accept(Items.DARK_OAK_FENCE_GATE);
      p_259444_.accept(Items.DARK_OAK_DOOR);
      p_259444_.accept(Items.DARK_OAK_TRAPDOOR);
      p_259444_.accept(Items.DARK_OAK_PRESSURE_PLATE);
      p_259444_.accept(Items.DARK_OAK_BUTTON);
      p_259444_.accept(Items.MANGROVE_LOG);
      p_259444_.accept(Items.MANGROVE_WOOD);
      p_259444_.accept(Items.STRIPPED_MANGROVE_LOG);
      p_259444_.accept(Items.STRIPPED_MANGROVE_WOOD);
      p_259444_.accept(Items.MANGROVE_PLANKS);
      p_259444_.accept(Items.MANGROVE_STAIRS);
      p_259444_.accept(Items.MANGROVE_SLAB);
      p_259444_.accept(Items.MANGROVE_FENCE);
      p_259444_.accept(Items.MANGROVE_FENCE_GATE);
      p_259444_.accept(Items.MANGROVE_DOOR);
      p_259444_.accept(Items.MANGROVE_TRAPDOOR);
      p_259444_.accept(Items.MANGROVE_PRESSURE_PLATE);
      p_259444_.accept(Items.MANGROVE_BUTTON);
      p_259444_.accept(Items.BAMBOO_BLOCK);
      p_259444_.accept(Items.STRIPPED_BAMBOO_BLOCK);
      p_259444_.accept(Items.BAMBOO_PLANKS);
      p_259444_.accept(Items.BAMBOO_MOSAIC);
      p_259444_.accept(Items.BAMBOO_STAIRS);
      p_259444_.accept(Items.BAMBOO_MOSAIC_STAIRS);
      p_259444_.accept(Items.BAMBOO_SLAB);
      p_259444_.accept(Items.BAMBOO_MOSAIC_SLAB);
      p_259444_.accept(Items.BAMBOO_FENCE);
      p_259444_.accept(Items.BAMBOO_FENCE_GATE);
      p_259444_.accept(Items.BAMBOO_DOOR);
      p_259444_.accept(Items.BAMBOO_TRAPDOOR);
      p_259444_.accept(Items.BAMBOO_PRESSURE_PLATE);
      p_259444_.accept(Items.BAMBOO_BUTTON);
      p_259444_.accept(Items.CRIMSON_STEM);
      p_259444_.accept(Items.CRIMSON_HYPHAE);
      p_259444_.accept(Items.STRIPPED_CRIMSON_STEM);
      p_259444_.accept(Items.STRIPPED_CRIMSON_HYPHAE);
      p_259444_.accept(Items.CRIMSON_PLANKS);
      p_259444_.accept(Items.CRIMSON_STAIRS);
      p_259444_.accept(Items.CRIMSON_SLAB);
      p_259444_.accept(Items.CRIMSON_FENCE);
      p_259444_.accept(Items.CRIMSON_FENCE_GATE);
      p_259444_.accept(Items.CRIMSON_DOOR);
      p_259444_.accept(Items.CRIMSON_TRAPDOOR);
      p_259444_.accept(Items.CRIMSON_PRESSURE_PLATE);
      p_259444_.accept(Items.CRIMSON_BUTTON);
      p_259444_.accept(Items.WARPED_STEM);
      p_259444_.accept(Items.WARPED_HYPHAE);
      p_259444_.accept(Items.STRIPPED_WARPED_STEM);
      p_259444_.accept(Items.STRIPPED_WARPED_HYPHAE);
      p_259444_.accept(Items.WARPED_PLANKS);
      p_259444_.accept(Items.WARPED_STAIRS);
      p_259444_.accept(Items.WARPED_SLAB);
      p_259444_.accept(Items.WARPED_FENCE);
      p_259444_.accept(Items.WARPED_FENCE_GATE);
      p_259444_.accept(Items.WARPED_DOOR);
      p_259444_.accept(Items.WARPED_TRAPDOOR);
      p_259444_.accept(Items.WARPED_PRESSURE_PLATE);
      p_259444_.accept(Items.WARPED_BUTTON);
      p_259444_.accept(Items.STONE);
      p_259444_.accept(Items.STONE_STAIRS);
      p_259444_.accept(Items.STONE_SLAB);
      p_259444_.accept(Items.STONE_PRESSURE_PLATE);
      p_259444_.accept(Items.STONE_BUTTON);
      p_259444_.accept(Items.COBBLESTONE);
      p_259444_.accept(Items.COBBLESTONE_STAIRS);
      p_259444_.accept(Items.COBBLESTONE_SLAB);
      p_259444_.accept(Items.COBBLESTONE_WALL);
      p_259444_.accept(Items.MOSSY_COBBLESTONE);
      p_259444_.accept(Items.MOSSY_COBBLESTONE_STAIRS);
      p_259444_.accept(Items.MOSSY_COBBLESTONE_SLAB);
      p_259444_.accept(Items.MOSSY_COBBLESTONE_WALL);
      p_259444_.accept(Items.SMOOTH_STONE);
      p_259444_.accept(Items.SMOOTH_STONE_SLAB);
      p_259444_.accept(Items.STONE_BRICKS);
      p_259444_.accept(Items.CRACKED_STONE_BRICKS);
      p_259444_.accept(Items.STONE_BRICK_STAIRS);
      p_259444_.accept(Items.STONE_BRICK_SLAB);
      p_259444_.accept(Items.STONE_BRICK_WALL);
      p_259444_.accept(Items.CHISELED_STONE_BRICKS);
      p_259444_.accept(Items.MOSSY_STONE_BRICKS);
      p_259444_.accept(Items.MOSSY_STONE_BRICK_STAIRS);
      p_259444_.accept(Items.MOSSY_STONE_BRICK_SLAB);
      p_259444_.accept(Items.MOSSY_STONE_BRICK_WALL);
      p_259444_.accept(Items.GRANITE);
      p_259444_.accept(Items.GRANITE_STAIRS);
      p_259444_.accept(Items.GRANITE_SLAB);
      p_259444_.accept(Items.GRANITE_WALL);
      p_259444_.accept(Items.POLISHED_GRANITE);
      p_259444_.accept(Items.POLISHED_GRANITE_STAIRS);
      p_259444_.accept(Items.POLISHED_GRANITE_SLAB);
      p_259444_.accept(Items.DIORITE);
      p_259444_.accept(Items.DIORITE_STAIRS);
      p_259444_.accept(Items.DIORITE_SLAB);
      p_259444_.accept(Items.DIORITE_WALL);
      p_259444_.accept(Items.POLISHED_DIORITE);
      p_259444_.accept(Items.POLISHED_DIORITE_STAIRS);
      p_259444_.accept(Items.POLISHED_DIORITE_SLAB);
      p_259444_.accept(Items.ANDESITE);
      p_259444_.accept(Items.ANDESITE_STAIRS);
      p_259444_.accept(Items.ANDESITE_SLAB);
      p_259444_.accept(Items.ANDESITE_WALL);
      p_259444_.accept(Items.POLISHED_ANDESITE);
      p_259444_.accept(Items.POLISHED_ANDESITE_STAIRS);
      p_259444_.accept(Items.POLISHED_ANDESITE_SLAB);
      p_259444_.accept(Items.DEEPSLATE);
      p_259444_.accept(Items.COBBLED_DEEPSLATE);
      p_259444_.accept(Items.COBBLED_DEEPSLATE_STAIRS);
      p_259444_.accept(Items.COBBLED_DEEPSLATE_SLAB);
      p_259444_.accept(Items.COBBLED_DEEPSLATE_WALL);
      p_259444_.accept(Items.CHISELED_DEEPSLATE);
      p_259444_.accept(Items.POLISHED_DEEPSLATE);
      p_259444_.accept(Items.POLISHED_DEEPSLATE_STAIRS);
      p_259444_.accept(Items.POLISHED_DEEPSLATE_SLAB);
      p_259444_.accept(Items.POLISHED_DEEPSLATE_WALL);
      p_259444_.accept(Items.DEEPSLATE_BRICKS);
      p_259444_.accept(Items.CRACKED_DEEPSLATE_BRICKS);
      p_259444_.accept(Items.DEEPSLATE_BRICK_STAIRS);
      p_259444_.accept(Items.DEEPSLATE_BRICK_SLAB);
      p_259444_.accept(Items.DEEPSLATE_BRICK_WALL);
      p_259444_.accept(Items.DEEPSLATE_TILES);
      p_259444_.accept(Items.CRACKED_DEEPSLATE_TILES);
      p_259444_.accept(Items.DEEPSLATE_TILE_STAIRS);
      p_259444_.accept(Items.DEEPSLATE_TILE_SLAB);
      p_259444_.accept(Items.DEEPSLATE_TILE_WALL);
      p_259444_.accept(Items.REINFORCED_DEEPSLATE);
      p_259444_.accept(Items.BRICKS);
      p_259444_.accept(Items.BRICK_STAIRS);
      p_259444_.accept(Items.BRICK_SLAB);
      p_259444_.accept(Items.BRICK_WALL);
      p_259444_.accept(Items.PACKED_MUD);
      p_259444_.accept(Items.MUD_BRICKS);
      p_259444_.accept(Items.MUD_BRICK_STAIRS);
      p_259444_.accept(Items.MUD_BRICK_SLAB);
      p_259444_.accept(Items.MUD_BRICK_WALL);
      p_259444_.accept(Items.SANDSTONE);
      p_259444_.accept(Items.SANDSTONE_STAIRS);
      p_259444_.accept(Items.SANDSTONE_SLAB);
      p_259444_.accept(Items.SANDSTONE_WALL);
      p_259444_.accept(Items.CHISELED_SANDSTONE);
      p_259444_.accept(Items.SMOOTH_SANDSTONE);
      p_259444_.accept(Items.SMOOTH_SANDSTONE_STAIRS);
      p_259444_.accept(Items.SMOOTH_SANDSTONE_SLAB);
      p_259444_.accept(Items.CUT_SANDSTONE);
      p_259444_.accept(Items.CUT_STANDSTONE_SLAB);
      p_259444_.accept(Items.RED_SANDSTONE);
      p_259444_.accept(Items.RED_SANDSTONE_STAIRS);
      p_259444_.accept(Items.RED_SANDSTONE_SLAB);
      p_259444_.accept(Items.RED_SANDSTONE_WALL);
      p_259444_.accept(Items.CHISELED_RED_SANDSTONE);
      p_259444_.accept(Items.SMOOTH_RED_SANDSTONE);
      p_259444_.accept(Items.SMOOTH_RED_SANDSTONE_STAIRS);
      p_259444_.accept(Items.SMOOTH_RED_SANDSTONE_SLAB);
      p_259444_.accept(Items.CUT_RED_SANDSTONE);
      p_259444_.accept(Items.CUT_RED_SANDSTONE_SLAB);
      p_259444_.accept(Items.SEA_LANTERN);
      p_259444_.accept(Items.PRISMARINE);
      p_259444_.accept(Items.PRISMARINE_STAIRS);
      p_259444_.accept(Items.PRISMARINE_SLAB);
      p_259444_.accept(Items.PRISMARINE_WALL);
      p_259444_.accept(Items.PRISMARINE_BRICKS);
      p_259444_.accept(Items.PRISMARINE_BRICK_STAIRS);
      p_259444_.accept(Items.PRISMARINE_BRICK_SLAB);
      p_259444_.accept(Items.DARK_PRISMARINE);
      p_259444_.accept(Items.DARK_PRISMARINE_STAIRS);
      p_259444_.accept(Items.DARK_PRISMARINE_SLAB);
      p_259444_.accept(Items.NETHERRACK);
      p_259444_.accept(Items.NETHER_BRICKS);
      p_259444_.accept(Items.CRACKED_NETHER_BRICKS);
      p_259444_.accept(Items.NETHER_BRICK_STAIRS);
      p_259444_.accept(Items.NETHER_BRICK_SLAB);
      p_259444_.accept(Items.NETHER_BRICK_WALL);
      p_259444_.accept(Items.NETHER_BRICK_FENCE);
      p_259444_.accept(Items.CHISELED_NETHER_BRICKS);
      p_259444_.accept(Items.RED_NETHER_BRICKS);
      p_259444_.accept(Items.RED_NETHER_BRICK_STAIRS);
      p_259444_.accept(Items.RED_NETHER_BRICK_SLAB);
      p_259444_.accept(Items.RED_NETHER_BRICK_WALL);
      p_259444_.accept(Items.BASALT);
      p_259444_.accept(Items.SMOOTH_BASALT);
      p_259444_.accept(Items.POLISHED_BASALT);
      p_259444_.accept(Items.BLACKSTONE);
      p_259444_.accept(Items.GILDED_BLACKSTONE);
      p_259444_.accept(Items.BLACKSTONE_STAIRS);
      p_259444_.accept(Items.BLACKSTONE_SLAB);
      p_259444_.accept(Items.BLACKSTONE_WALL);
      p_259444_.accept(Items.CHISELED_POLISHED_BLACKSTONE);
      p_259444_.accept(Items.POLISHED_BLACKSTONE);
      p_259444_.accept(Items.POLISHED_BLACKSTONE_STAIRS);
      p_259444_.accept(Items.POLISHED_BLACKSTONE_SLAB);
      p_259444_.accept(Items.POLISHED_BLACKSTONE_WALL);
      p_259444_.accept(Items.POLISHED_BLACKSTONE_PRESSURE_PLATE);
      p_259444_.accept(Items.POLISHED_BLACKSTONE_BUTTON);
      p_259444_.accept(Items.POLISHED_BLACKSTONE_BRICKS);
      p_259444_.accept(Items.CRACKED_POLISHED_BLACKSTONE_BRICKS);
      p_259444_.accept(Items.POLISHED_BLACKSTONE_BRICK_STAIRS);
      p_259444_.accept(Items.POLISHED_BLACKSTONE_BRICK_SLAB);
      p_259444_.accept(Items.POLISHED_BLACKSTONE_BRICK_WALL);
      p_259444_.accept(Items.END_STONE);
      p_259444_.accept(Items.END_STONE_BRICKS);
      p_259444_.accept(Items.END_STONE_BRICK_STAIRS);
      p_259444_.accept(Items.END_STONE_BRICK_SLAB);
      p_259444_.accept(Items.END_STONE_BRICK_WALL);
      p_259444_.accept(Items.PURPUR_BLOCK);
      p_259444_.accept(Items.PURPUR_PILLAR);
      p_259444_.accept(Items.PURPUR_STAIRS);
      p_259444_.accept(Items.PURPUR_SLAB);
      p_259444_.accept(Items.COAL_BLOCK);
      p_259444_.accept(Items.IRON_BLOCK);
      p_259444_.accept(Items.IRON_BARS);
      p_259444_.accept(Items.IRON_DOOR);
      p_259444_.accept(Items.IRON_TRAPDOOR);
      p_259444_.accept(Items.HEAVY_WEIGHTED_PRESSURE_PLATE);
      p_259444_.accept(Items.CHAIN);
      p_259444_.accept(Items.GOLD_BLOCK);
      p_259444_.accept(Items.LIGHT_WEIGHTED_PRESSURE_PLATE);
      p_259444_.accept(Items.REDSTONE_BLOCK);
      p_259444_.accept(Items.EMERALD_BLOCK);
      p_259444_.accept(Items.LAPIS_BLOCK);
      p_259444_.accept(Items.DIAMOND_BLOCK);
      p_259444_.accept(Items.NETHERITE_BLOCK);
      p_259444_.accept(Items.QUARTZ_BLOCK);
      p_259444_.accept(Items.QUARTZ_STAIRS);
      p_259444_.accept(Items.QUARTZ_SLAB);
      p_259444_.accept(Items.CHISELED_QUARTZ_BLOCK);
      p_259444_.accept(Items.QUARTZ_BRICKS);
      p_259444_.accept(Items.QUARTZ_PILLAR);
      p_259444_.accept(Items.SMOOTH_QUARTZ);
      p_259444_.accept(Items.SMOOTH_QUARTZ_STAIRS);
      p_259444_.accept(Items.SMOOTH_QUARTZ_SLAB);
      p_259444_.accept(Items.AMETHYST_BLOCK);
      p_259444_.accept(Items.COPPER_BLOCK);
      p_259444_.accept(Items.CUT_COPPER);
      p_259444_.accept(Items.CUT_COPPER_STAIRS);
      p_259444_.accept(Items.CUT_COPPER_SLAB);
      p_259444_.accept(Items.EXPOSED_COPPER);
      p_259444_.accept(Items.EXPOSED_CUT_COPPER);
      p_259444_.accept(Items.EXPOSED_CUT_COPPER_STAIRS);
      p_259444_.accept(Items.EXPOSED_CUT_COPPER_SLAB);
      p_259444_.accept(Items.WEATHERED_COPPER);
      p_259444_.accept(Items.WEATHERED_CUT_COPPER);
      p_259444_.accept(Items.WEATHERED_CUT_COPPER_STAIRS);
      p_259444_.accept(Items.WEATHERED_CUT_COPPER_SLAB);
      p_259444_.accept(Items.OXIDIZED_COPPER);
      p_259444_.accept(Items.OXIDIZED_CUT_COPPER);
      p_259444_.accept(Items.OXIDIZED_CUT_COPPER_STAIRS);
      p_259444_.accept(Items.OXIDIZED_CUT_COPPER_SLAB);
      p_259444_.accept(Items.WAXED_COPPER_BLOCK);
      p_259444_.accept(Items.WAXED_CUT_COPPER);
      p_259444_.accept(Items.WAXED_CUT_COPPER_STAIRS);
      p_259444_.accept(Items.WAXED_CUT_COPPER_SLAB);
      p_259444_.accept(Items.WAXED_EXPOSED_COPPER);
      p_259444_.accept(Items.WAXED_EXPOSED_CUT_COPPER);
      p_259444_.accept(Items.WAXED_EXPOSED_CUT_COPPER_STAIRS);
      p_259444_.accept(Items.WAXED_EXPOSED_CUT_COPPER_SLAB);
      p_259444_.accept(Items.WAXED_WEATHERED_COPPER);
      p_259444_.accept(Items.WAXED_WEATHERED_CUT_COPPER);
      p_259444_.accept(Items.WAXED_WEATHERED_CUT_COPPER_STAIRS);
      p_259444_.accept(Items.WAXED_WEATHERED_CUT_COPPER_SLAB);
      p_259444_.accept(Items.WAXED_OXIDIZED_COPPER);
      p_259444_.accept(Items.WAXED_OXIDIZED_CUT_COPPER);
      p_259444_.accept(Items.WAXED_OXIDIZED_CUT_COPPER_STAIRS);
      p_259444_.accept(Items.WAXED_OXIDIZED_CUT_COPPER_SLAB);
   }).build();
   public static final CreativeModeTab COLORED_BLOCKS = CreativeModeTab.builder(CreativeModeTab.Row.TOP, 1).title(Component.translatable("itemGroup.coloredBlocks")).icon(() -> {
      return new ItemStack(Blocks.CYAN_WOOL);
   }).displayItems((p_259916_, p_259709_, p_259922_) -> {
      p_259709_.accept(Items.WHITE_WOOL);
      p_259709_.accept(Items.LIGHT_GRAY_WOOL);
      p_259709_.accept(Items.GRAY_WOOL);
      p_259709_.accept(Items.BLACK_WOOL);
      p_259709_.accept(Items.BROWN_WOOL);
      p_259709_.accept(Items.RED_WOOL);
      p_259709_.accept(Items.ORANGE_WOOL);
      p_259709_.accept(Items.YELLOW_WOOL);
      p_259709_.accept(Items.LIME_WOOL);
      p_259709_.accept(Items.GREEN_WOOL);
      p_259709_.accept(Items.CYAN_WOOL);
      p_259709_.accept(Items.LIGHT_BLUE_WOOL);
      p_259709_.accept(Items.BLUE_WOOL);
      p_259709_.accept(Items.PURPLE_WOOL);
      p_259709_.accept(Items.MAGENTA_WOOL);
      p_259709_.accept(Items.PINK_WOOL);
      p_259709_.accept(Items.WHITE_CARPET);
      p_259709_.accept(Items.LIGHT_GRAY_CARPET);
      p_259709_.accept(Items.GRAY_CARPET);
      p_259709_.accept(Items.BLACK_CARPET);
      p_259709_.accept(Items.BROWN_CARPET);
      p_259709_.accept(Items.RED_CARPET);
      p_259709_.accept(Items.ORANGE_CARPET);
      p_259709_.accept(Items.YELLOW_CARPET);
      p_259709_.accept(Items.LIME_CARPET);
      p_259709_.accept(Items.GREEN_CARPET);
      p_259709_.accept(Items.CYAN_CARPET);
      p_259709_.accept(Items.LIGHT_BLUE_CARPET);
      p_259709_.accept(Items.BLUE_CARPET);
      p_259709_.accept(Items.PURPLE_CARPET);
      p_259709_.accept(Items.MAGENTA_CARPET);
      p_259709_.accept(Items.PINK_CARPET);
      p_259709_.accept(Items.TERRACOTTA);
      p_259709_.accept(Items.WHITE_TERRACOTTA);
      p_259709_.accept(Items.LIGHT_GRAY_TERRACOTTA);
      p_259709_.accept(Items.GRAY_TERRACOTTA);
      p_259709_.accept(Items.BLACK_TERRACOTTA);
      p_259709_.accept(Items.BROWN_TERRACOTTA);
      p_259709_.accept(Items.RED_TERRACOTTA);
      p_259709_.accept(Items.ORANGE_TERRACOTTA);
      p_259709_.accept(Items.YELLOW_TERRACOTTA);
      p_259709_.accept(Items.LIME_TERRACOTTA);
      p_259709_.accept(Items.GREEN_TERRACOTTA);
      p_259709_.accept(Items.CYAN_TERRACOTTA);
      p_259709_.accept(Items.LIGHT_BLUE_TERRACOTTA);
      p_259709_.accept(Items.BLUE_TERRACOTTA);
      p_259709_.accept(Items.PURPLE_TERRACOTTA);
      p_259709_.accept(Items.MAGENTA_TERRACOTTA);
      p_259709_.accept(Items.PINK_TERRACOTTA);
      p_259709_.accept(Items.WHITE_CONCRETE);
      p_259709_.accept(Items.LIGHT_GRAY_CONCRETE);
      p_259709_.accept(Items.GRAY_CONCRETE);
      p_259709_.accept(Items.BLACK_CONCRETE);
      p_259709_.accept(Items.BROWN_CONCRETE);
      p_259709_.accept(Items.RED_CONCRETE);
      p_259709_.accept(Items.ORANGE_CONCRETE);
      p_259709_.accept(Items.YELLOW_CONCRETE);
      p_259709_.accept(Items.LIME_CONCRETE);
      p_259709_.accept(Items.GREEN_CONCRETE);
      p_259709_.accept(Items.CYAN_CONCRETE);
      p_259709_.accept(Items.LIGHT_BLUE_CONCRETE);
      p_259709_.accept(Items.BLUE_CONCRETE);
      p_259709_.accept(Items.PURPLE_CONCRETE);
      p_259709_.accept(Items.MAGENTA_CONCRETE);
      p_259709_.accept(Items.PINK_CONCRETE);
      p_259709_.accept(Items.WHITE_CONCRETE_POWDER);
      p_259709_.accept(Items.LIGHT_GRAY_CONCRETE_POWDER);
      p_259709_.accept(Items.GRAY_CONCRETE_POWDER);
      p_259709_.accept(Items.BLACK_CONCRETE_POWDER);
      p_259709_.accept(Items.BROWN_CONCRETE_POWDER);
      p_259709_.accept(Items.RED_CONCRETE_POWDER);
      p_259709_.accept(Items.ORANGE_CONCRETE_POWDER);
      p_259709_.accept(Items.YELLOW_CONCRETE_POWDER);
      p_259709_.accept(Items.LIME_CONCRETE_POWDER);
      p_259709_.accept(Items.GREEN_CONCRETE_POWDER);
      p_259709_.accept(Items.CYAN_CONCRETE_POWDER);
      p_259709_.accept(Items.LIGHT_BLUE_CONCRETE_POWDER);
      p_259709_.accept(Items.BLUE_CONCRETE_POWDER);
      p_259709_.accept(Items.PURPLE_CONCRETE_POWDER);
      p_259709_.accept(Items.MAGENTA_CONCRETE_POWDER);
      p_259709_.accept(Items.PINK_CONCRETE_POWDER);
      p_259709_.accept(Items.WHITE_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.LIGHT_GRAY_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.GRAY_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.BLACK_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.BROWN_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.RED_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.ORANGE_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.YELLOW_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.LIME_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.GREEN_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.CYAN_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.LIGHT_BLUE_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.BLUE_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.PURPLE_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.MAGENTA_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.PINK_GLAZED_TERRACOTTA);
      p_259709_.accept(Items.GLASS);
      p_259709_.accept(Items.TINTED_GLASS);
      p_259709_.accept(Items.WHITE_STAINED_GLASS);
      p_259709_.accept(Items.LIGHT_GRAY_STAINED_GLASS);
      p_259709_.accept(Items.GRAY_STAINED_GLASS);
      p_259709_.accept(Items.BLACK_STAINED_GLASS);
      p_259709_.accept(Items.BROWN_STAINED_GLASS);
      p_259709_.accept(Items.RED_STAINED_GLASS);
      p_259709_.accept(Items.ORANGE_STAINED_GLASS);
      p_259709_.accept(Items.YELLOW_STAINED_GLASS);
      p_259709_.accept(Items.LIME_STAINED_GLASS);
      p_259709_.accept(Items.GREEN_STAINED_GLASS);
      p_259709_.accept(Items.CYAN_STAINED_GLASS);
      p_259709_.accept(Items.LIGHT_BLUE_STAINED_GLASS);
      p_259709_.accept(Items.BLUE_STAINED_GLASS);
      p_259709_.accept(Items.PURPLE_STAINED_GLASS);
      p_259709_.accept(Items.MAGENTA_STAINED_GLASS);
      p_259709_.accept(Items.PINK_STAINED_GLASS);
      p_259709_.accept(Items.GLASS_PANE);
      p_259709_.accept(Items.WHITE_STAINED_GLASS_PANE);
      p_259709_.accept(Items.LIGHT_GRAY_STAINED_GLASS_PANE);
      p_259709_.accept(Items.GRAY_STAINED_GLASS_PANE);
      p_259709_.accept(Items.BLACK_STAINED_GLASS_PANE);
      p_259709_.accept(Items.BROWN_STAINED_GLASS_PANE);
      p_259709_.accept(Items.RED_STAINED_GLASS_PANE);
      p_259709_.accept(Items.ORANGE_STAINED_GLASS_PANE);
      p_259709_.accept(Items.YELLOW_STAINED_GLASS_PANE);
      p_259709_.accept(Items.LIME_STAINED_GLASS_PANE);
      p_259709_.accept(Items.GREEN_STAINED_GLASS_PANE);
      p_259709_.accept(Items.CYAN_STAINED_GLASS_PANE);
      p_259709_.accept(Items.LIGHT_BLUE_STAINED_GLASS_PANE);
      p_259709_.accept(Items.BLUE_STAINED_GLASS_PANE);
      p_259709_.accept(Items.PURPLE_STAINED_GLASS_PANE);
      p_259709_.accept(Items.MAGENTA_STAINED_GLASS_PANE);
      p_259709_.accept(Items.PINK_STAINED_GLASS_PANE);
      p_259709_.accept(Items.SHULKER_BOX);
      p_259709_.accept(Items.WHITE_SHULKER_BOX);
      p_259709_.accept(Items.LIGHT_GRAY_SHULKER_BOX);
      p_259709_.accept(Items.GRAY_SHULKER_BOX);
      p_259709_.accept(Items.BLACK_SHULKER_BOX);
      p_259709_.accept(Items.BROWN_SHULKER_BOX);
      p_259709_.accept(Items.RED_SHULKER_BOX);
      p_259709_.accept(Items.ORANGE_SHULKER_BOX);
      p_259709_.accept(Items.YELLOW_SHULKER_BOX);
      p_259709_.accept(Items.LIME_SHULKER_BOX);
      p_259709_.accept(Items.GREEN_SHULKER_BOX);
      p_259709_.accept(Items.CYAN_SHULKER_BOX);
      p_259709_.accept(Items.LIGHT_BLUE_SHULKER_BOX);
      p_259709_.accept(Items.BLUE_SHULKER_BOX);
      p_259709_.accept(Items.PURPLE_SHULKER_BOX);
      p_259709_.accept(Items.MAGENTA_SHULKER_BOX);
      p_259709_.accept(Items.PINK_SHULKER_BOX);
      p_259709_.accept(Items.WHITE_BED);
      p_259709_.accept(Items.LIGHT_GRAY_BED);
      p_259709_.accept(Items.GRAY_BED);
      p_259709_.accept(Items.BLACK_BED);
      p_259709_.accept(Items.BROWN_BED);
      p_259709_.accept(Items.RED_BED);
      p_259709_.accept(Items.ORANGE_BED);
      p_259709_.accept(Items.YELLOW_BED);
      p_259709_.accept(Items.LIME_BED);
      p_259709_.accept(Items.GREEN_BED);
      p_259709_.accept(Items.CYAN_BED);
      p_259709_.accept(Items.LIGHT_BLUE_BED);
      p_259709_.accept(Items.BLUE_BED);
      p_259709_.accept(Items.PURPLE_BED);
      p_259709_.accept(Items.MAGENTA_BED);
      p_259709_.accept(Items.PINK_BED);
      p_259709_.accept(Items.CANDLE);
      p_259709_.accept(Items.WHITE_CANDLE);
      p_259709_.accept(Items.LIGHT_GRAY_CANDLE);
      p_259709_.accept(Items.GRAY_CANDLE);
      p_259709_.accept(Items.BLACK_CANDLE);
      p_259709_.accept(Items.BROWN_CANDLE);
      p_259709_.accept(Items.RED_CANDLE);
      p_259709_.accept(Items.ORANGE_CANDLE);
      p_259709_.accept(Items.YELLOW_CANDLE);
      p_259709_.accept(Items.LIME_CANDLE);
      p_259709_.accept(Items.GREEN_CANDLE);
      p_259709_.accept(Items.CYAN_CANDLE);
      p_259709_.accept(Items.LIGHT_BLUE_CANDLE);
      p_259709_.accept(Items.BLUE_CANDLE);
      p_259709_.accept(Items.PURPLE_CANDLE);
      p_259709_.accept(Items.MAGENTA_CANDLE);
      p_259709_.accept(Items.PINK_CANDLE);
      p_259709_.accept(Items.WHITE_BANNER);
      p_259709_.accept(Items.LIGHT_GRAY_BANNER);
      p_259709_.accept(Items.GRAY_BANNER);
      p_259709_.accept(Items.BLACK_BANNER);
      p_259709_.accept(Items.BROWN_BANNER);
      p_259709_.accept(Items.RED_BANNER);
      p_259709_.accept(Items.ORANGE_BANNER);
      p_259709_.accept(Items.YELLOW_BANNER);
      p_259709_.accept(Items.LIME_BANNER);
      p_259709_.accept(Items.GREEN_BANNER);
      p_259709_.accept(Items.CYAN_BANNER);
      p_259709_.accept(Items.LIGHT_BLUE_BANNER);
      p_259709_.accept(Items.BLUE_BANNER);
      p_259709_.accept(Items.PURPLE_BANNER);
      p_259709_.accept(Items.MAGENTA_BANNER);
      p_259709_.accept(Items.PINK_BANNER);
   }).build();
   public static final CreativeModeTab NATURAL_BLOCKS = CreativeModeTab.builder(CreativeModeTab.Row.TOP, 2).title(Component.translatable("itemGroup.natural")).icon(() -> {
      return new ItemStack(Blocks.GRASS_BLOCK);
   }).displayItems((p_260103_, p_260000_, p_259526_) -> {
      p_260000_.accept(Items.GRASS_BLOCK);
      p_260000_.accept(Items.PODZOL);
      p_260000_.accept(Items.MYCELIUM);
      p_260000_.accept(Items.DIRT_PATH);
      p_260000_.accept(Items.DIRT);
      p_260000_.accept(Items.COARSE_DIRT);
      p_260000_.accept(Items.ROOTED_DIRT);
      p_260000_.accept(Items.FARMLAND);
      p_260000_.accept(Items.MUD);
      p_260000_.accept(Items.CLAY);
      p_260000_.accept(Items.GRAVEL);
      p_260000_.accept(Items.SAND);
      p_260000_.accept(Items.SANDSTONE);
      p_260000_.accept(Items.RED_SAND);
      p_260000_.accept(Items.RED_SANDSTONE);
      p_260000_.accept(Items.ICE);
      p_260000_.accept(Items.PACKED_ICE);
      p_260000_.accept(Items.BLUE_ICE);
      p_260000_.accept(Items.SNOW_BLOCK);
      p_260000_.accept(Items.SNOW);
      p_260000_.accept(Items.MOSS_BLOCK);
      p_260000_.accept(Items.MOSS_CARPET);
      p_260000_.accept(Items.STONE);
      p_260000_.accept(Items.DEEPSLATE);
      p_260000_.accept(Items.GRANITE);
      p_260000_.accept(Items.DIORITE);
      p_260000_.accept(Items.ANDESITE);
      p_260000_.accept(Items.CALCITE);
      p_260000_.accept(Items.TUFF);
      p_260000_.accept(Items.DRIPSTONE_BLOCK);
      p_260000_.accept(Items.POINTED_DRIPSTONE);
      p_260000_.accept(Items.PRISMARINE);
      p_260000_.accept(Items.MAGMA_BLOCK);
      p_260000_.accept(Items.OBSIDIAN);
      p_260000_.accept(Items.CRYING_OBSIDIAN);
      p_260000_.accept(Items.NETHERRACK);
      p_260000_.accept(Items.CRIMSON_NYLIUM);
      p_260000_.accept(Items.WARPED_NYLIUM);
      p_260000_.accept(Items.SOUL_SAND);
      p_260000_.accept(Items.SOUL_SOIL);
      p_260000_.accept(Items.BONE_BLOCK);
      p_260000_.accept(Items.BLACKSTONE);
      p_260000_.accept(Items.BASALT);
      p_260000_.accept(Items.SMOOTH_BASALT);
      p_260000_.accept(Items.END_STONE);
      p_260000_.accept(Items.COAL_ORE);
      p_260000_.accept(Items.DEEPSLATE_COAL_ORE);
      p_260000_.accept(Items.IRON_ORE);
      p_260000_.accept(Items.DEEPSLATE_IRON_ORE);
      p_260000_.accept(Items.COPPER_ORE);
      p_260000_.accept(Items.DEEPSLATE_COPPER_ORE);
      p_260000_.accept(Items.GOLD_ORE);
      p_260000_.accept(Items.DEEPSLATE_GOLD_ORE);
      p_260000_.accept(Items.REDSTONE_ORE);
      p_260000_.accept(Items.DEEPSLATE_REDSTONE_ORE);
      p_260000_.accept(Items.EMERALD_ORE);
      p_260000_.accept(Items.DEEPSLATE_EMERALD_ORE);
      p_260000_.accept(Items.LAPIS_ORE);
      p_260000_.accept(Items.DEEPSLATE_LAPIS_ORE);
      p_260000_.accept(Items.DIAMOND_ORE);
      p_260000_.accept(Items.DEEPSLATE_DIAMOND_ORE);
      p_260000_.accept(Items.NETHER_GOLD_ORE);
      p_260000_.accept(Items.NETHER_QUARTZ_ORE);
      p_260000_.accept(Items.ANCIENT_DEBRIS);
      p_260000_.accept(Items.RAW_IRON_BLOCK);
      p_260000_.accept(Items.RAW_COPPER_BLOCK);
      p_260000_.accept(Items.RAW_GOLD_BLOCK);
      p_260000_.accept(Items.GLOWSTONE);
      p_260000_.accept(Items.AMETHYST_BLOCK);
      p_260000_.accept(Items.BUDDING_AMETHYST);
      p_260000_.accept(Items.SMALL_AMETHYST_BUD);
      p_260000_.accept(Items.MEDIUM_AMETHYST_BUD);
      p_260000_.accept(Items.LARGE_AMETHYST_BUD);
      p_260000_.accept(Items.AMETHYST_CLUSTER);
      p_260000_.accept(Items.OAK_LOG);
      p_260000_.accept(Items.SPRUCE_LOG);
      p_260000_.accept(Items.BIRCH_LOG);
      p_260000_.accept(Items.JUNGLE_LOG);
      p_260000_.accept(Items.ACACIA_LOG);
      p_260000_.accept(Items.DARK_OAK_LOG);
      p_260000_.accept(Items.MANGROVE_LOG);
      p_260000_.accept(Items.MUSHROOM_STEM);
      p_260000_.accept(Items.CRIMSON_STEM);
      p_260000_.accept(Items.WARPED_STEM);
      p_260000_.accept(Items.OAK_LEAVES);
      p_260000_.accept(Items.SPRUCE_LEAVES);
      p_260000_.accept(Items.BIRCH_LEAVES);
      p_260000_.accept(Items.JUNGLE_LEAVES);
      p_260000_.accept(Items.ACACIA_LEAVES);
      p_260000_.accept(Items.DARK_OAK_LEAVES);
      p_260000_.accept(Items.MANGROVE_LEAVES);
      p_260000_.accept(Items.MANGROVE_ROOTS);
      p_260000_.accept(Items.MUDDY_MANGROVE_ROOTS);
      p_260000_.accept(Items.AZALEA_LEAVES);
      p_260000_.accept(Items.FLOWERING_AZALEA_LEAVES);
      p_260000_.accept(Items.BROWN_MUSHROOM_BLOCK);
      p_260000_.accept(Items.RED_MUSHROOM_BLOCK);
      p_260000_.accept(Items.NETHER_WART_BLOCK);
      p_260000_.accept(Items.WARPED_WART_BLOCK);
      p_260000_.accept(Items.SHROOMLIGHT);
      p_260000_.accept(Items.OAK_SAPLING);
      p_260000_.accept(Items.SPRUCE_SAPLING);
      p_260000_.accept(Items.BIRCH_SAPLING);
      p_260000_.accept(Items.JUNGLE_SAPLING);
      p_260000_.accept(Items.ACACIA_SAPLING);
      p_260000_.accept(Items.DARK_OAK_SAPLING);
      p_260000_.accept(Items.MANGROVE_PROPAGULE);
      p_260000_.accept(Items.AZALEA);
      p_260000_.accept(Items.FLOWERING_AZALEA);
      p_260000_.accept(Items.BROWN_MUSHROOM);
      p_260000_.accept(Items.RED_MUSHROOM);
      p_260000_.accept(Items.CRIMSON_FUNGUS);
      p_260000_.accept(Items.WARPED_FUNGUS);
      p_260000_.accept(Items.GRASS);
      p_260000_.accept(Items.FERN);
      p_260000_.accept(Items.DEAD_BUSH);
      p_260000_.accept(Items.DANDELION);
      p_260000_.accept(Items.POPPY);
      p_260000_.accept(Items.BLUE_ORCHID);
      p_260000_.accept(Items.ALLIUM);
      p_260000_.accept(Items.AZURE_BLUET);
      p_260000_.accept(Items.RED_TULIP);
      p_260000_.accept(Items.ORANGE_TULIP);
      p_260000_.accept(Items.WHITE_TULIP);
      p_260000_.accept(Items.PINK_TULIP);
      p_260000_.accept(Items.OXEYE_DAISY);
      p_260000_.accept(Items.CORNFLOWER);
      p_260000_.accept(Items.LILY_OF_THE_VALLEY);
      p_260000_.accept(Items.SPORE_BLOSSOM);
      p_260000_.accept(Items.BAMBOO);
      p_260000_.accept(Items.SUGAR_CANE);
      p_260000_.accept(Items.CACTUS);
      p_260000_.accept(Items.WITHER_ROSE);
      p_260000_.accept(Items.CRIMSON_ROOTS);
      p_260000_.accept(Items.WARPED_ROOTS);
      p_260000_.accept(Items.NETHER_SPROUTS);
      p_260000_.accept(Items.WEEPING_VINES);
      p_260000_.accept(Items.TWISTING_VINES);
      p_260000_.accept(Items.VINE);
      p_260000_.accept(Items.TALL_GRASS);
      p_260000_.accept(Items.LARGE_FERN);
      p_260000_.accept(Items.SUNFLOWER);
      p_260000_.accept(Items.LILAC);
      p_260000_.accept(Items.ROSE_BUSH);
      p_260000_.accept(Items.PEONY);
      p_260000_.accept(Items.BIG_DRIPLEAF);
      p_260000_.accept(Items.SMALL_DRIPLEAF);
      p_260000_.accept(Items.CHORUS_PLANT);
      p_260000_.accept(Items.CHORUS_FLOWER);
      p_260000_.accept(Items.GLOW_LICHEN);
      p_260000_.accept(Items.HANGING_ROOTS);
      p_260000_.accept(Items.FROGSPAWN);
      p_260000_.accept(Items.TURTLE_EGG);
      p_260000_.accept(Items.WHEAT_SEEDS);
      p_260000_.accept(Items.COCOA_BEANS);
      p_260000_.accept(Items.PUMPKIN_SEEDS);
      p_260000_.accept(Items.MELON_SEEDS);
      p_260000_.accept(Items.BEETROOT_SEEDS);
      p_260000_.accept(Items.GLOW_BERRIES);
      p_260000_.accept(Items.SWEET_BERRIES);
      p_260000_.accept(Items.NETHER_WART);
      p_260000_.accept(Items.LILY_PAD);
      p_260000_.accept(Items.SEAGRASS);
      p_260000_.accept(Items.SEA_PICKLE);
      p_260000_.accept(Items.KELP);
      p_260000_.accept(Items.DRIED_KELP_BLOCK);
      p_260000_.accept(Items.TUBE_CORAL_BLOCK);
      p_260000_.accept(Items.BRAIN_CORAL_BLOCK);
      p_260000_.accept(Items.BUBBLE_CORAL_BLOCK);
      p_260000_.accept(Items.FIRE_CORAL_BLOCK);
      p_260000_.accept(Items.HORN_CORAL_BLOCK);
      p_260000_.accept(Items.DEAD_TUBE_CORAL_BLOCK);
      p_260000_.accept(Items.DEAD_BRAIN_CORAL_BLOCK);
      p_260000_.accept(Items.DEAD_BUBBLE_CORAL_BLOCK);
      p_260000_.accept(Items.DEAD_FIRE_CORAL_BLOCK);
      p_260000_.accept(Items.DEAD_HORN_CORAL_BLOCK);
      p_260000_.accept(Items.TUBE_CORAL);
      p_260000_.accept(Items.BRAIN_CORAL);
      p_260000_.accept(Items.BUBBLE_CORAL);
      p_260000_.accept(Items.FIRE_CORAL);
      p_260000_.accept(Items.HORN_CORAL);
      p_260000_.accept(Items.DEAD_BRAIN_CORAL);
      p_260000_.accept(Items.DEAD_BUBBLE_CORAL);
      p_260000_.accept(Items.DEAD_FIRE_CORAL);
      p_260000_.accept(Items.DEAD_HORN_CORAL);
      p_260000_.accept(Items.DEAD_TUBE_CORAL);
      p_260000_.accept(Items.TUBE_CORAL_FAN);
      p_260000_.accept(Items.BRAIN_CORAL_FAN);
      p_260000_.accept(Items.BUBBLE_CORAL_FAN);
      p_260000_.accept(Items.FIRE_CORAL_FAN);
      p_260000_.accept(Items.HORN_CORAL_FAN);
      p_260000_.accept(Items.DEAD_TUBE_CORAL_FAN);
      p_260000_.accept(Items.DEAD_BRAIN_CORAL_FAN);
      p_260000_.accept(Items.DEAD_BUBBLE_CORAL_FAN);
      p_260000_.accept(Items.DEAD_FIRE_CORAL_FAN);
      p_260000_.accept(Items.DEAD_HORN_CORAL_FAN);
      p_260000_.accept(Items.SPONGE);
      p_260000_.accept(Items.WET_SPONGE);
      p_260000_.accept(Items.MELON);
      p_260000_.accept(Items.PUMPKIN);
      p_260000_.accept(Items.CARVED_PUMPKIN);
      p_260000_.accept(Items.JACK_O_LANTERN);
      p_260000_.accept(Items.HAY_BLOCK);
      p_260000_.accept(Items.BEE_NEST);
      p_260000_.accept(Items.HONEYCOMB_BLOCK);
      p_260000_.accept(Items.SLIME_BLOCK);
      p_260000_.accept(Items.HONEY_BLOCK);
      p_260000_.accept(Items.OCHRE_FROGLIGHT);
      p_260000_.accept(Items.VERDANT_FROGLIGHT);
      p_260000_.accept(Items.PEARLESCENT_FROGLIGHT);
      p_260000_.accept(Items.SCULK);
      p_260000_.accept(Items.SCULK_VEIN);
      p_260000_.accept(Items.SCULK_CATALYST);
      p_260000_.accept(Items.SCULK_SHRIEKER);
      p_260000_.accept(Items.SCULK_SENSOR);
      p_260000_.accept(Items.COBWEB);
      p_260000_.accept(Items.BEDROCK);
   }).build();
   public static final CreativeModeTab FUNCTIONAL_BLOCKS = CreativeModeTab.builder(CreativeModeTab.Row.TOP, 3).title(Component.translatable("itemGroup.functional")).icon(() -> {
      return new ItemStack(Items.OAK_SIGN);
   }).displayItems((p_261443_, p_261444_, p_261445_) -> {
      p_261444_.accept(Items.TORCH);
      p_261444_.accept(Items.SOUL_TORCH);
      p_261444_.accept(Items.REDSTONE_TORCH);
      p_261444_.accept(Items.LANTERN);
      p_261444_.accept(Items.SOUL_LANTERN);
      p_261444_.accept(Items.CHAIN);
      p_261444_.accept(Items.END_ROD);
      p_261444_.accept(Items.SEA_LANTERN);
      p_261444_.accept(Items.REDSTONE_LAMP);
      p_261444_.accept(Items.GLOWSTONE);
      p_261444_.accept(Items.SHROOMLIGHT);
      p_261444_.accept(Items.OCHRE_FROGLIGHT);
      p_261444_.accept(Items.VERDANT_FROGLIGHT);
      p_261444_.accept(Items.PEARLESCENT_FROGLIGHT);
      p_261444_.accept(Items.CRYING_OBSIDIAN);
      p_261444_.accept(Items.GLOW_LICHEN);
      p_261444_.accept(Items.MAGMA_BLOCK);
      p_261444_.accept(Items.CRAFTING_TABLE);
      p_261444_.accept(Items.STONECUTTER);
      p_261444_.accept(Items.CARTOGRAPHY_TABLE);
      p_261444_.accept(Items.FLETCHING_TABLE);
      p_261444_.accept(Items.SMITHING_TABLE);
      p_261444_.accept(Items.GRINDSTONE);
      p_261444_.accept(Items.LOOM);
      p_261444_.accept(Items.FURNACE);
      p_261444_.accept(Items.SMOKER);
      p_261444_.accept(Items.BLAST_FURNACE);
      p_261444_.accept(Items.CAMPFIRE);
      p_261444_.accept(Items.SOUL_CAMPFIRE);
      p_261444_.accept(Items.ANVIL);
      p_261444_.accept(Items.CHIPPED_ANVIL);
      p_261444_.accept(Items.DAMAGED_ANVIL);
      p_261444_.accept(Items.COMPOSTER);
      p_261444_.accept(Items.NOTE_BLOCK);
      p_261444_.accept(Items.JUKEBOX);
      p_261444_.accept(Items.ENCHANTING_TABLE);
      p_261444_.accept(Items.END_CRYSTAL);
      p_261444_.accept(Items.BREWING_STAND);
      p_261444_.accept(Items.CAULDRON);
      p_261444_.accept(Items.BELL);
      p_261444_.accept(Items.BEACON);
      p_261444_.accept(Items.CONDUIT);
      p_261444_.accept(Items.LODESTONE);
      p_261444_.accept(Items.LADDER);
      p_261444_.accept(Items.SCAFFOLDING);
      p_261444_.accept(Items.BEE_NEST);
      p_261444_.accept(Items.BEEHIVE);
      p_261444_.accept(Items.LIGHTNING_ROD);
      p_261444_.accept(Items.FLOWER_POT);
      p_261444_.accept(Items.ARMOR_STAND);
      p_261444_.accept(Items.ITEM_FRAME);
      p_261444_.accept(Items.GLOW_ITEM_FRAME);
      p_261444_.accept(Items.PAINTING);
      p_261444_.accept(Items.BOOKSHELF);
      p_261444_.accept(Items.CHISELED_BOOKSHELF);
      p_261444_.accept(Items.LECTERN);
      p_261444_.accept(Items.TINTED_GLASS);
      p_261444_.accept(Items.OAK_SIGN);
      p_261444_.accept(Items.OAK_HANGING_SIGN);
      p_261444_.accept(Items.SPRUCE_SIGN);
      p_261444_.accept(Items.SPRUCE_HANGING_SIGN);
      p_261444_.accept(Items.BIRCH_SIGN);
      p_261444_.accept(Items.BIRCH_HANGING_SIGN);
      p_261444_.accept(Items.JUNGLE_SIGN);
      p_261444_.accept(Items.JUNGLE_HANGING_SIGN);
      p_261444_.accept(Items.ACACIA_SIGN);
      p_261444_.accept(Items.ACACIA_HANGING_SIGN);
      p_261444_.accept(Items.DARK_OAK_SIGN);
      p_261444_.accept(Items.DARK_OAK_HANGING_SIGN);
      p_261444_.accept(Items.MANGROVE_SIGN);
      p_261444_.accept(Items.MANGROVE_HANGING_SIGN);
      p_261444_.accept(Items.BAMBOO_SIGN);
      p_261444_.accept(Items.BAMBOO_HANGING_SIGN);
      p_261444_.accept(Items.CRIMSON_SIGN);
      p_261444_.accept(Items.CRIMSON_HANGING_SIGN);
      p_261444_.accept(Items.WARPED_SIGN);
      p_261444_.accept(Items.WARPED_HANGING_SIGN);
      p_261444_.accept(Items.CHEST);
      p_261444_.accept(Items.BARREL);
      p_261444_.accept(Items.ENDER_CHEST);
      p_261444_.accept(Items.SHULKER_BOX);
      p_261444_.accept(Items.WHITE_SHULKER_BOX);
      p_261444_.accept(Items.LIGHT_GRAY_SHULKER_BOX);
      p_261444_.accept(Items.GRAY_SHULKER_BOX);
      p_261444_.accept(Items.BLACK_SHULKER_BOX);
      p_261444_.accept(Items.BROWN_SHULKER_BOX);
      p_261444_.accept(Items.RED_SHULKER_BOX);
      p_261444_.accept(Items.ORANGE_SHULKER_BOX);
      p_261444_.accept(Items.YELLOW_SHULKER_BOX);
      p_261444_.accept(Items.LIME_SHULKER_BOX);
      p_261444_.accept(Items.GREEN_SHULKER_BOX);
      p_261444_.accept(Items.CYAN_SHULKER_BOX);
      p_261444_.accept(Items.LIGHT_BLUE_SHULKER_BOX);
      p_261444_.accept(Items.BLUE_SHULKER_BOX);
      p_261444_.accept(Items.PURPLE_SHULKER_BOX);
      p_261444_.accept(Items.MAGENTA_SHULKER_BOX);
      p_261444_.accept(Items.PINK_SHULKER_BOX);
      p_261444_.accept(Items.RESPAWN_ANCHOR);
      p_261444_.accept(Items.WHITE_BED);
      p_261444_.accept(Items.LIGHT_GRAY_BED);
      p_261444_.accept(Items.GRAY_BED);
      p_261444_.accept(Items.BLACK_BED);
      p_261444_.accept(Items.BROWN_BED);
      p_261444_.accept(Items.RED_BED);
      p_261444_.accept(Items.ORANGE_BED);
      p_261444_.accept(Items.YELLOW_BED);
      p_261444_.accept(Items.LIME_BED);
      p_261444_.accept(Items.GREEN_BED);
      p_261444_.accept(Items.CYAN_BED);
      p_261444_.accept(Items.LIGHT_BLUE_BED);
      p_261444_.accept(Items.BLUE_BED);
      p_261444_.accept(Items.PURPLE_BED);
      p_261444_.accept(Items.MAGENTA_BED);
      p_261444_.accept(Items.PINK_BED);
      p_261444_.accept(Items.CANDLE);
      p_261444_.accept(Items.WHITE_CANDLE);
      p_261444_.accept(Items.LIGHT_GRAY_CANDLE);
      p_261444_.accept(Items.GRAY_CANDLE);
      p_261444_.accept(Items.BLACK_CANDLE);
      p_261444_.accept(Items.BROWN_CANDLE);
      p_261444_.accept(Items.RED_CANDLE);
      p_261444_.accept(Items.ORANGE_CANDLE);
      p_261444_.accept(Items.YELLOW_CANDLE);
      p_261444_.accept(Items.LIME_CANDLE);
      p_261444_.accept(Items.GREEN_CANDLE);
      p_261444_.accept(Items.CYAN_CANDLE);
      p_261444_.accept(Items.LIGHT_BLUE_CANDLE);
      p_261444_.accept(Items.BLUE_CANDLE);
      p_261444_.accept(Items.PURPLE_CANDLE);
      p_261444_.accept(Items.MAGENTA_CANDLE);
      p_261444_.accept(Items.PINK_CANDLE);
      p_261444_.accept(Items.WHITE_BANNER);
      p_261444_.accept(Items.LIGHT_GRAY_BANNER);
      p_261444_.accept(Items.GRAY_BANNER);
      p_261444_.accept(Items.BLACK_BANNER);
      p_261444_.accept(Items.BROWN_BANNER);
      p_261444_.accept(Items.RED_BANNER);
      p_261444_.accept(Items.ORANGE_BANNER);
      p_261444_.accept(Items.YELLOW_BANNER);
      p_261444_.accept(Items.LIME_BANNER);
      p_261444_.accept(Items.GREEN_BANNER);
      p_261444_.accept(Items.CYAN_BANNER);
      p_261444_.accept(Items.LIGHT_BLUE_BANNER);
      p_261444_.accept(Items.BLUE_BANNER);
      p_261444_.accept(Items.PURPLE_BANNER);
      p_261444_.accept(Items.MAGENTA_BANNER);
      p_261444_.accept(Items.PINK_BANNER);
      p_261444_.accept(Raid.getLeaderBannerInstance());
      p_261444_.accept(Items.SKELETON_SKULL);
      p_261444_.accept(Items.WITHER_SKELETON_SKULL);
      p_261444_.accept(Items.PLAYER_HEAD);
      p_261444_.accept(Items.ZOMBIE_HEAD);
      p_261444_.accept(Items.CREEPER_HEAD);
      p_261444_.accept(Items.PIGLIN_HEAD);
      p_261444_.accept(Items.DRAGON_HEAD);
      p_261444_.accept(Items.DRAGON_EGG);
      p_261444_.accept(Items.END_PORTAL_FRAME);
      p_261444_.accept(Items.ENDER_EYE);
      p_261444_.accept(Items.INFESTED_STONE);
      p_261444_.accept(Items.INFESTED_COBBLESTONE);
      p_261444_.accept(Items.INFESTED_STONE_BRICKS);
      p_261444_.accept(Items.INFESTED_MOSSY_STONE_BRICKS);
      p_261444_.accept(Items.INFESTED_CRACKED_STONE_BRICKS);
      p_261444_.accept(Items.INFESTED_CHISELED_STONE_BRICKS);
      p_261444_.accept(Items.INFESTED_DEEPSLATE);
   }).build();
   public static final CreativeModeTab REDSTONE_BLOCKS = CreativeModeTab.builder(CreativeModeTab.Row.TOP, 4).title(Component.translatable("itemGroup.redstone")).icon(() -> {
      return new ItemStack(Items.REDSTONE);
   }).displayItems((p_261446_, p_261447_, p_261448_) -> {
      p_261447_.accept(Items.REDSTONE);
      p_261447_.accept(Items.REDSTONE_TORCH);
      p_261447_.accept(Items.REDSTONE_BLOCK);
      p_261447_.accept(Items.REPEATER);
      p_261447_.accept(Items.COMPARATOR);
      p_261447_.accept(Items.TARGET);
      p_261447_.accept(Items.LEVER);
      p_261447_.accept(Items.OAK_BUTTON);
      p_261447_.accept(Items.STONE_BUTTON);
      p_261447_.accept(Items.OAK_PRESSURE_PLATE);
      p_261447_.accept(Items.STONE_PRESSURE_PLATE);
      p_261447_.accept(Items.LIGHT_WEIGHTED_PRESSURE_PLATE);
      p_261447_.accept(Items.HEAVY_WEIGHTED_PRESSURE_PLATE);
      p_261447_.accept(Items.SCULK_SENSOR);
      p_261447_.accept(Items.WHITE_WOOL);
      p_261447_.accept(Items.TRIPWIRE_HOOK);
      p_261447_.accept(Items.STRING);
      p_261447_.accept(Items.LECTERN);
      p_261447_.accept(Items.DAYLIGHT_DETECTOR);
      p_261447_.accept(Items.LIGHTNING_ROD);
      p_261447_.accept(Items.PISTON);
      p_261447_.accept(Items.STICKY_PISTON);
      p_261447_.accept(Items.SLIME_BLOCK);
      p_261447_.accept(Items.HONEY_BLOCK);
      p_261447_.accept(Items.DISPENSER);
      p_261447_.accept(Items.DROPPER);
      p_261447_.accept(Items.HOPPER);
      p_261447_.accept(Items.CHEST);
      p_261447_.accept(Items.BARREL);
      p_261447_.accept(Items.CHISELED_BOOKSHELF);
      p_261447_.accept(Items.FURNACE);
      p_261447_.accept(Items.TRAPPED_CHEST);
      p_261447_.accept(Items.OBSERVER);
      p_261447_.accept(Items.NOTE_BLOCK);
      p_261447_.accept(Items.COMPOSTER);
      p_261447_.accept(Items.CAULDRON);
      p_261447_.accept(Items.RAIL);
      p_261447_.accept(Items.POWERED_RAIL);
      p_261447_.accept(Items.DETECTOR_RAIL);
      p_261447_.accept(Items.ACTIVATOR_RAIL);
      p_261447_.accept(Items.MINECART);
      p_261447_.accept(Items.HOPPER_MINECART);
      p_261447_.accept(Items.CHEST_MINECART);
      p_261447_.accept(Items.FURNACE_MINECART);
      p_261447_.accept(Items.TNT_MINECART);
      p_261447_.accept(Items.OAK_CHEST_BOAT);
      p_261447_.accept(Items.BAMBOO_CHEST_RAFT);
      p_261447_.accept(Items.OAK_DOOR);
      p_261447_.accept(Items.IRON_DOOR);
      p_261447_.accept(Items.OAK_FENCE_GATE);
      p_261447_.accept(Items.OAK_TRAPDOOR);
      p_261447_.accept(Items.IRON_TRAPDOOR);
      p_261447_.accept(Items.TNT);
      p_261447_.accept(Items.REDSTONE_LAMP);
      p_261447_.accept(Items.BELL);
      p_261447_.accept(Items.BIG_DRIPLEAF);
      p_261447_.accept(Items.ARMOR_STAND);
      p_261447_.accept(Items.REDSTONE_ORE);
   }).build();
   public static final CreativeModeTab HOTBAR = CreativeModeTab.builder(CreativeModeTab.Row.TOP, 5).title(Component.translatable("itemGroup.hotbar")).icon(() -> {
      return new ItemStack(Blocks.BOOKSHELF);
   }).alignedRight().type(CreativeModeTab.Type.HOTBAR).build();
   public static final CreativeModeTab SEARCH = CreativeModeTab.builder(CreativeModeTab.Row.TOP, 6).title(Component.translatable("itemGroup.search")).icon(() -> {
      return new ItemStack(Items.COMPASS);
   }).displayItems((p_261440_, p_261441_, p_261442_) -> {
      Set<ItemStack> set = ItemStackLinkedSet.createTypeAndTagSet();

      for(CreativeModeTab creativemodetab : CreativeModeTabs.allTabs()) {
         if (creativemodetab.getType() != CreativeModeTab.Type.SEARCH) {
            set.addAll(creativemodetab.getSearchTabDisplayItems());
         }
      }

      p_261441_.acceptAll(set);
   }).backgroundSuffix("item_search.png").alignedRight().type(CreativeModeTab.Type.SEARCH).build();
   public static final CreativeModeTab TOOLS_AND_UTILITIES = CreativeModeTab.builder(CreativeModeTab.Row.BOTTOM, 0).title(Component.translatable("itemGroup.tools")).icon(() -> {
      return new ItemStack(Items.DIAMOND_PICKAXE);
   }).displayItems((p_260132_, p_259554_, p_259053_) -> {
      p_259554_.accept(Items.WOODEN_SHOVEL);
      p_259554_.accept(Items.WOODEN_PICKAXE);
      p_259554_.accept(Items.WOODEN_AXE);
      p_259554_.accept(Items.WOODEN_HOE);
      p_259554_.accept(Items.STONE_SHOVEL);
      p_259554_.accept(Items.STONE_PICKAXE);
      p_259554_.accept(Items.STONE_AXE);
      p_259554_.accept(Items.STONE_HOE);
      p_259554_.accept(Items.IRON_SHOVEL);
      p_259554_.accept(Items.IRON_PICKAXE);
      p_259554_.accept(Items.IRON_AXE);
      p_259554_.accept(Items.IRON_HOE);
      p_259554_.accept(Items.GOLDEN_SHOVEL);
      p_259554_.accept(Items.GOLDEN_PICKAXE);
      p_259554_.accept(Items.GOLDEN_AXE);
      p_259554_.accept(Items.GOLDEN_HOE);
      p_259554_.accept(Items.DIAMOND_SHOVEL);
      p_259554_.accept(Items.DIAMOND_PICKAXE);
      p_259554_.accept(Items.DIAMOND_AXE);
      p_259554_.accept(Items.DIAMOND_HOE);
      p_259554_.accept(Items.NETHERITE_SHOVEL);
      p_259554_.accept(Items.NETHERITE_PICKAXE);
      p_259554_.accept(Items.NETHERITE_AXE);
      p_259554_.accept(Items.NETHERITE_HOE);
      p_259554_.accept(Items.BUCKET);
      p_259554_.accept(Items.WATER_BUCKET);
      p_259554_.accept(Items.PUFFERFISH_BUCKET);
      p_259554_.accept(Items.SALMON_BUCKET);
      p_259554_.accept(Items.COD_BUCKET);
      p_259554_.accept(Items.TROPICAL_FISH_BUCKET);
      p_259554_.accept(Items.AXOLOTL_BUCKET);
      p_259554_.accept(Items.TADPOLE_BUCKET);
      p_259554_.accept(Items.LAVA_BUCKET);
      p_259554_.accept(Items.POWDER_SNOW_BUCKET);
      p_259554_.accept(Items.MILK_BUCKET);
      p_259554_.accept(Items.FISHING_ROD);
      p_259554_.accept(Items.FLINT_AND_STEEL);
      p_259554_.accept(Items.FIRE_CHARGE);
      p_259554_.accept(Items.BONE_MEAL);
      p_259554_.accept(Items.SHEARS);
      p_259554_.accept(Items.NAME_TAG);
      p_259554_.accept(Items.LEAD);
      if (p_260132_.contains(FeatureFlags.BUNDLE)) {
         p_259554_.accept(Items.BUNDLE);
      }

      p_259554_.accept(Items.COMPASS);
      p_259554_.accept(Items.RECOVERY_COMPASS);
      p_259554_.accept(Items.CLOCK);
      p_259554_.accept(Items.SPYGLASS);
      p_259554_.accept(Items.MAP);
      p_259554_.accept(Items.WRITABLE_BOOK);
      p_259554_.accept(Items.ENDER_PEARL);
      p_259554_.accept(Items.ENDER_EYE);
      p_259554_.accept(Items.ELYTRA);
      generateFireworksAllDurations(p_259554_, CreativeModeTab.TabVisibility.PARENT_AND_SEARCH_TABS);
      p_259554_.accept(Items.SADDLE);
      p_259554_.accept(Items.CARROT_ON_A_STICK);
      p_259554_.accept(Items.WARPED_FUNGUS_ON_A_STICK);
      p_259554_.accept(Items.OAK_BOAT);
      p_259554_.accept(Items.OAK_CHEST_BOAT);
      p_259554_.accept(Items.SPRUCE_BOAT);
      p_259554_.accept(Items.SPRUCE_CHEST_BOAT);
      p_259554_.accept(Items.BIRCH_BOAT);
      p_259554_.accept(Items.BIRCH_CHEST_BOAT);
      p_259554_.accept(Items.JUNGLE_BOAT);
      p_259554_.accept(Items.JUNGLE_CHEST_BOAT);
      p_259554_.accept(Items.ACACIA_BOAT);
      p_259554_.accept(Items.ACACIA_CHEST_BOAT);
      p_259554_.accept(Items.DARK_OAK_BOAT);
      p_259554_.accept(Items.DARK_OAK_CHEST_BOAT);
      p_259554_.accept(Items.MANGROVE_BOAT);
      p_259554_.accept(Items.MANGROVE_CHEST_BOAT);
      p_259554_.accept(Items.BAMBOO_RAFT);
      p_259554_.accept(Items.BAMBOO_CHEST_RAFT);
      p_259554_.accept(Items.RAIL);
      p_259554_.accept(Items.POWERED_RAIL);
      p_259554_.accept(Items.DETECTOR_RAIL);
      p_259554_.accept(Items.ACTIVATOR_RAIL);
      p_259554_.accept(Items.MINECART);
      p_259554_.accept(Items.HOPPER_MINECART);
      p_259554_.accept(Items.CHEST_MINECART);
      p_259554_.accept(Items.FURNACE_MINECART);
      p_259554_.accept(Items.TNT_MINECART);
      generateInstrumentTypes(p_259554_, Items.GOAT_HORN, InstrumentTags.GOAT_HORNS, CreativeModeTab.TabVisibility.PARENT_AND_SEARCH_TABS);
      p_259554_.accept(Items.MUSIC_DISC_13);
      p_259554_.accept(Items.MUSIC_DISC_CAT);
      p_259554_.accept(Items.MUSIC_DISC_BLOCKS);
      p_259554_.accept(Items.MUSIC_DISC_CHIRP);
      p_259554_.accept(Items.MUSIC_DISC_FAR);
      p_259554_.accept(Items.MUSIC_DISC_MALL);
      p_259554_.accept(Items.MUSIC_DISC_MELLOHI);
      p_259554_.accept(Items.MUSIC_DISC_STAL);
      p_259554_.accept(Items.MUSIC_DISC_STRAD);
      p_259554_.accept(Items.MUSIC_DISC_WARD);
      p_259554_.accept(Items.MUSIC_DISC_11);
      p_259554_.accept(Items.MUSIC_DISC_WAIT);
      p_259554_.accept(Items.MUSIC_DISC_OTHERSIDE);
      p_259554_.accept(Items.MUSIC_DISC_5);
      p_259554_.accept(Items.MUSIC_DISC_PIGSTEP);
   }).build();
   public static final CreativeModeTab COMBAT = CreativeModeTab.builder(CreativeModeTab.Row.BOTTOM, 1).title(Component.translatable("itemGroup.combat")).icon(() -> {
      return new ItemStack(Items.NETHERITE_SWORD);
   }).displayItems((p_259978_, p_259465_, p_260044_) -> {
      p_259465_.accept(Items.WOODEN_SWORD);
      p_259465_.accept(Items.STONE_SWORD);
      p_259465_.accept(Items.IRON_SWORD);
      p_259465_.accept(Items.GOLDEN_SWORD);
      p_259465_.accept(Items.DIAMOND_SWORD);
      p_259465_.accept(Items.NETHERITE_SWORD);
      p_259465_.accept(Items.WOODEN_AXE);
      p_259465_.accept(Items.STONE_AXE);
      p_259465_.accept(Items.IRON_AXE);
      p_259465_.accept(Items.GOLDEN_AXE);
      p_259465_.accept(Items.DIAMOND_AXE);
      p_259465_.accept(Items.NETHERITE_AXE);
      p_259465_.accept(Items.TRIDENT);
      p_259465_.accept(Items.SHIELD);
      p_259465_.accept(Items.LEATHER_HELMET);
      p_259465_.accept(Items.LEATHER_CHESTPLATE);
      p_259465_.accept(Items.LEATHER_LEGGINGS);
      p_259465_.accept(Items.LEATHER_BOOTS);
      p_259465_.accept(Items.CHAINMAIL_HELMET);
      p_259465_.accept(Items.CHAINMAIL_CHESTPLATE);
      p_259465_.accept(Items.CHAINMAIL_LEGGINGS);
      p_259465_.accept(Items.CHAINMAIL_BOOTS);
      p_259465_.accept(Items.IRON_HELMET);
      p_259465_.accept(Items.IRON_CHESTPLATE);
      p_259465_.accept(Items.IRON_LEGGINGS);
      p_259465_.accept(Items.IRON_BOOTS);
      p_259465_.accept(Items.GOLDEN_HELMET);
      p_259465_.accept(Items.GOLDEN_CHESTPLATE);
      p_259465_.accept(Items.GOLDEN_LEGGINGS);
      p_259465_.accept(Items.GOLDEN_BOOTS);
      p_259465_.accept(Items.DIAMOND_HELMET);
      p_259465_.accept(Items.DIAMOND_CHESTPLATE);
      p_259465_.accept(Items.DIAMOND_LEGGINGS);
      p_259465_.accept(Items.DIAMOND_BOOTS);
      p_259465_.accept(Items.NETHERITE_HELMET);
      p_259465_.accept(Items.NETHERITE_CHESTPLATE);
      p_259465_.accept(Items.NETHERITE_LEGGINGS);
      p_259465_.accept(Items.NETHERITE_BOOTS);
      p_259465_.accept(Items.TURTLE_HELMET);
      p_259465_.accept(Items.LEATHER_HORSE_ARMOR);
      p_259465_.accept(Items.IRON_HORSE_ARMOR);
      p_259465_.accept(Items.GOLDEN_HORSE_ARMOR);
      p_259465_.accept(Items.DIAMOND_HORSE_ARMOR);
      p_259465_.accept(Items.TOTEM_OF_UNDYING);
      p_259465_.accept(Items.TNT);
      p_259465_.accept(Items.END_CRYSTAL);
      p_259465_.accept(Items.SNOWBALL);
      p_259465_.accept(Items.EGG);
      p_259465_.accept(Items.BOW);
      p_259465_.accept(Items.CROSSBOW);
      generateFireworksAllDurations(p_259465_, CreativeModeTab.TabVisibility.PARENT_AND_SEARCH_TABS);
      p_259465_.accept(Items.ARROW);
      p_259465_.accept(Items.SPECTRAL_ARROW);
      generatePotionEffectTypes(p_259465_, Items.TIPPED_ARROW, CreativeModeTab.TabVisibility.PARENT_AND_SEARCH_TABS);
   }).build();
   public static final CreativeModeTab FOOD_AND_DRINKS = CreativeModeTab.builder(CreativeModeTab.Row.BOTTOM, 2).title(Component.translatable("itemGroup.foodAndDrink")).icon(() -> {
      return new ItemStack(Items.GOLDEN_APPLE);
   }).displayItems((p_259913_, p_260188_, p_259779_) -> {
      p_260188_.accept(Items.APPLE);
      p_260188_.accept(Items.GOLDEN_APPLE);
      p_260188_.accept(Items.ENCHANTED_GOLDEN_APPLE);
      p_260188_.accept(Items.MELON_SLICE);
      p_260188_.accept(Items.SWEET_BERRIES);
      p_260188_.accept(Items.GLOW_BERRIES);
      p_260188_.accept(Items.CHORUS_FRUIT);
      p_260188_.accept(Items.CARROT);
      p_260188_.accept(Items.GOLDEN_CARROT);
      p_260188_.accept(Items.POTATO);
      p_260188_.accept(Items.BAKED_POTATO);
      p_260188_.accept(Items.POISONOUS_POTATO);
      p_260188_.accept(Items.BEETROOT);
      p_260188_.accept(Items.DRIED_KELP);
      p_260188_.accept(Items.BEEF);
      p_260188_.accept(Items.COOKED_BEEF);
      p_260188_.accept(Items.PORKCHOP);
      p_260188_.accept(Items.COOKED_PORKCHOP);
      p_260188_.accept(Items.MUTTON);
      p_260188_.accept(Items.COOKED_MUTTON);
      p_260188_.accept(Items.CHICKEN);
      p_260188_.accept(Items.COOKED_CHICKEN);
      p_260188_.accept(Items.RABBIT);
      p_260188_.accept(Items.COOKED_RABBIT);
      p_260188_.accept(Items.COD);
      p_260188_.accept(Items.COOKED_COD);
      p_260188_.accept(Items.SALMON);
      p_260188_.accept(Items.COOKED_SALMON);
      p_260188_.accept(Items.TROPICAL_FISH);
      p_260188_.accept(Items.PUFFERFISH);
      p_260188_.accept(Items.BREAD);
      p_260188_.accept(Items.COOKIE);
      p_260188_.accept(Items.CAKE);
      p_260188_.accept(Items.PUMPKIN_PIE);
      p_260188_.accept(Items.ROTTEN_FLESH);
      p_260188_.accept(Items.SPIDER_EYE);
      p_260188_.accept(Items.MUSHROOM_STEW);
      p_260188_.accept(Items.BEETROOT_SOUP);
      p_260188_.accept(Items.RABBIT_STEW);
      generateSuspiciousStews(p_260188_, CreativeModeTab.TabVisibility.PARENT_AND_SEARCH_TABS);
      p_260188_.accept(Items.MILK_BUCKET);
      p_260188_.accept(Items.HONEY_BOTTLE);
      generatePotionEffectTypes(p_260188_, Items.POTION, CreativeModeTab.TabVisibility.PARENT_AND_SEARCH_TABS);
      generatePotionEffectTypes(p_260188_, Items.SPLASH_POTION, CreativeModeTab.TabVisibility.PARENT_AND_SEARCH_TABS);
      generatePotionEffectTypes(p_260188_, Items.LINGERING_POTION, CreativeModeTab.TabVisibility.PARENT_AND_SEARCH_TABS);
   }).build();
   public static final CreativeModeTab INGREDIENTS = CreativeModeTab.builder(CreativeModeTab.Row.BOTTOM, 3).title(Component.translatable("itemGroup.ingredients")).icon(() -> {
      return new ItemStack(Items.IRON_INGOT);
   }).displayItems((p_260072_, p_259069_, p_259064_) -> {
      p_259069_.accept(Items.COAL);
      p_259069_.accept(Items.CHARCOAL);
      p_259069_.accept(Items.RAW_IRON);
      p_259069_.accept(Items.RAW_COPPER);
      p_259069_.accept(Items.RAW_GOLD);
      p_259069_.accept(Items.EMERALD);
      p_259069_.accept(Items.LAPIS_LAZULI);
      p_259069_.accept(Items.DIAMOND);
      p_259069_.accept(Items.ANCIENT_DEBRIS);
      p_259069_.accept(Items.QUARTZ);
      p_259069_.accept(Items.AMETHYST_SHARD);
      p_259069_.accept(Items.IRON_NUGGET);
      p_259069_.accept(Items.GOLD_NUGGET);
      p_259069_.accept(Items.IRON_INGOT);
      p_259069_.accept(Items.COPPER_INGOT);
      p_259069_.accept(Items.GOLD_INGOT);
      p_259069_.accept(Items.NETHERITE_SCRAP);
      p_259069_.accept(Items.NETHERITE_INGOT);
      p_259069_.accept(Items.STICK);
      p_259069_.accept(Items.FLINT);
      p_259069_.accept(Items.WHEAT);
      p_259069_.accept(Items.BONE);
      p_259069_.accept(Items.BONE_MEAL);
      p_259069_.accept(Items.STRING);
      p_259069_.accept(Items.FEATHER);
      p_259069_.accept(Items.SNOWBALL);
      p_259069_.accept(Items.EGG);
      p_259069_.accept(Items.LEATHER);
      p_259069_.accept(Items.RABBIT_HIDE);
      p_259069_.accept(Items.HONEYCOMB);
      p_259069_.accept(Items.INK_SAC);
      p_259069_.accept(Items.GLOW_INK_SAC);
      p_259069_.accept(Items.SCUTE);
      p_259069_.accept(Items.SLIME_BALL);
      p_259069_.accept(Items.CLAY_BALL);
      p_259069_.accept(Items.PRISMARINE_SHARD);
      p_259069_.accept(Items.PRISMARINE_CRYSTALS);
      p_259069_.accept(Items.NAUTILUS_SHELL);
      p_259069_.accept(Items.HEART_OF_THE_SEA);
      p_259069_.accept(Items.BLAZE_ROD);
      p_259069_.accept(Items.NETHER_STAR);
      p_259069_.accept(Items.ENDER_PEARL);
      p_259069_.accept(Items.ENDER_EYE);
      p_259069_.accept(Items.SHULKER_SHELL);
      p_259069_.accept(Items.POPPED_CHORUS_FRUIT);
      p_259069_.accept(Items.ECHO_SHARD);
      p_259069_.accept(Items.DISC_FRAGMENT_5);
      p_259069_.accept(Items.WHITE_DYE);
      p_259069_.accept(Items.LIGHT_GRAY_DYE);
      p_259069_.accept(Items.GRAY_DYE);
      p_259069_.accept(Items.BLACK_DYE);
      p_259069_.accept(Items.BROWN_DYE);
      p_259069_.accept(Items.RED_DYE);
      p_259069_.accept(Items.ORANGE_DYE);
      p_259069_.accept(Items.YELLOW_DYE);
      p_259069_.accept(Items.LIME_DYE);
      p_259069_.accept(Items.GREEN_DYE);
      p_259069_.accept(Items.CYAN_DYE);
      p_259069_.accept(Items.LIGHT_BLUE_DYE);
      p_259069_.accept(Items.BLUE_DYE);
      p_259069_.accept(Items.PURPLE_DYE);
      p_259069_.accept(Items.MAGENTA_DYE);
      p_259069_.accept(Items.PINK_DYE);
      p_259069_.accept(Items.BOWL);
      p_259069_.accept(Items.BRICK);
      p_259069_.accept(Items.NETHER_BRICK);
      p_259069_.accept(Items.PAPER);
      p_259069_.accept(Items.BOOK);
      p_259069_.accept(Items.FIREWORK_STAR);
      p_259069_.accept(Items.GLASS_BOTTLE);
      p_259069_.accept(Items.NETHER_WART);
      p_259069_.accept(Items.REDSTONE);
      p_259069_.accept(Items.GLOWSTONE_DUST);
      p_259069_.accept(Items.GUNPOWDER);
      p_259069_.accept(Items.DRAGON_BREATH);
      p_259069_.accept(Items.FERMENTED_SPIDER_EYE);
      p_259069_.accept(Items.BLAZE_POWDER);
      p_259069_.accept(Items.SUGAR);
      p_259069_.accept(Items.RABBIT_FOOT);
      p_259069_.accept(Items.GLISTERING_MELON_SLICE);
      p_259069_.accept(Items.SPIDER_EYE);
      p_259069_.accept(Items.PUFFERFISH);
      p_259069_.accept(Items.MAGMA_CREAM);
      p_259069_.accept(Items.GOLDEN_CARROT);
      p_259069_.accept(Items.GHAST_TEAR);
      p_259069_.accept(Items.TURTLE_HELMET);
      p_259069_.accept(Items.PHANTOM_MEMBRANE);
      p_259069_.accept(Items.FLOWER_BANNER_PATTERN);
      p_259069_.accept(Items.CREEPER_BANNER_PATTERN);
      p_259069_.accept(Items.SKULL_BANNER_PATTERN);
      p_259069_.accept(Items.MOJANG_BANNER_PATTERN);
      p_259069_.accept(Items.GLOBE_BANNER_PATTERN);
      p_259069_.accept(Items.PIGLIN_BANNER_PATTERN);
      p_259069_.accept(Items.EXPERIENCE_BOTTLE);
      Set<EnchantmentCategory> set = EnumSet.allOf(EnchantmentCategory.class);
      generateEnchantmentBookTypesOnlyMaxLevel(p_259069_, set, CreativeModeTab.TabVisibility.PARENT_TAB_ONLY);
      generateEnchantmentBookTypesAllLevels(p_259069_, set, CreativeModeTab.TabVisibility.SEARCH_TAB_ONLY);
   }).build();
   public static final CreativeModeTab SPAWN_EGGS = CreativeModeTab.builder(CreativeModeTab.Row.BOTTOM, 4).title(Component.translatable("itemGroup.spawnEggs")).icon(() -> {
      return new ItemStack(Items.PIG_SPAWN_EGG);
   }).displayItems((p_260203_, p_260158_, p_259735_) -> {
      p_260158_.accept(Items.SPAWNER);
      p_260158_.accept(Items.ALLAY_SPAWN_EGG);
      p_260158_.accept(Items.AXOLOTL_SPAWN_EGG);
      p_260158_.accept(Items.BAT_SPAWN_EGG);
      p_260158_.accept(Items.BEE_SPAWN_EGG);
      p_260158_.accept(Items.BLAZE_SPAWN_EGG);
      p_260158_.accept(Items.CAMEL_SPAWN_EGG);
      p_260158_.accept(Items.CAT_SPAWN_EGG);
      p_260158_.accept(Items.CAVE_SPIDER_SPAWN_EGG);
      p_260158_.accept(Items.CHICKEN_SPAWN_EGG);
      p_260158_.accept(Items.COD_SPAWN_EGG);
      p_260158_.accept(Items.COW_SPAWN_EGG);
      p_260158_.accept(Items.CREEPER_SPAWN_EGG);
      p_260158_.accept(Items.DOLPHIN_SPAWN_EGG);
      p_260158_.accept(Items.DONKEY_SPAWN_EGG);
      p_260158_.accept(Items.DROWNED_SPAWN_EGG);
      p_260158_.accept(Items.ELDER_GUARDIAN_SPAWN_EGG);
      p_260158_.accept(Items.ENDERMAN_SPAWN_EGG);
      p_260158_.accept(Items.ENDERMITE_SPAWN_EGG);
      p_260158_.accept(Items.EVOKER_SPAWN_EGG);
      p_260158_.accept(Items.FOX_SPAWN_EGG);
      p_260158_.accept(Items.FROG_SPAWN_EGG);
      p_260158_.accept(Items.GHAST_SPAWN_EGG);
      p_260158_.accept(Items.GLOW_SQUID_SPAWN_EGG);
      p_260158_.accept(Items.GOAT_SPAWN_EGG);
      p_260158_.accept(Items.GUARDIAN_SPAWN_EGG);
      p_260158_.accept(Items.HOGLIN_SPAWN_EGG);
      p_260158_.accept(Items.HORSE_SPAWN_EGG);
      p_260158_.accept(Items.HUSK_SPAWN_EGG);
      p_260158_.accept(Items.IRON_GOLEM_SPAWN_EGG);
      p_260158_.accept(Items.LLAMA_SPAWN_EGG);
      p_260158_.accept(Items.MAGMA_CUBE_SPAWN_EGG);
      p_260158_.accept(Items.MOOSHROOM_SPAWN_EGG);
      p_260158_.accept(Items.MULE_SPAWN_EGG);
      p_260158_.accept(Items.OCELOT_SPAWN_EGG);
      p_260158_.accept(Items.PANDA_SPAWN_EGG);
      p_260158_.accept(Items.PARROT_SPAWN_EGG);
      p_260158_.accept(Items.PHANTOM_SPAWN_EGG);
      p_260158_.accept(Items.PIG_SPAWN_EGG);
      p_260158_.accept(Items.PIGLIN_SPAWN_EGG);
      p_260158_.accept(Items.PIGLIN_BRUTE_SPAWN_EGG);
      p_260158_.accept(Items.PILLAGER_SPAWN_EGG);
      p_260158_.accept(Items.POLAR_BEAR_SPAWN_EGG);
      p_260158_.accept(Items.PUFFERFISH_SPAWN_EGG);
      p_260158_.accept(Items.RABBIT_SPAWN_EGG);
      p_260158_.accept(Items.RAVAGER_SPAWN_EGG);
      p_260158_.accept(Items.SALMON_SPAWN_EGG);
      p_260158_.accept(Items.SHEEP_SPAWN_EGG);
      p_260158_.accept(Items.SHULKER_SPAWN_EGG);
      p_260158_.accept(Items.SILVERFISH_SPAWN_EGG);
      p_260158_.accept(Items.SKELETON_SPAWN_EGG);
      p_260158_.accept(Items.SKELETON_HORSE_SPAWN_EGG);
      p_260158_.accept(Items.SLIME_SPAWN_EGG);
      p_260158_.accept(Items.SNOW_GOLEM_SPAWN_EGG);
      p_260158_.accept(Items.SPIDER_SPAWN_EGG);
      p_260158_.accept(Items.SQUID_SPAWN_EGG);
      p_260158_.accept(Items.STRAY_SPAWN_EGG);
      p_260158_.accept(Items.STRIDER_SPAWN_EGG);
      p_260158_.accept(Items.TADPOLE_SPAWN_EGG);
      p_260158_.accept(Items.TRADER_LLAMA_SPAWN_EGG);
      p_260158_.accept(Items.TROPICAL_FISH_SPAWN_EGG);
      p_260158_.accept(Items.TURTLE_SPAWN_EGG);
      p_260158_.accept(Items.VEX_SPAWN_EGG);
      p_260158_.accept(Items.VILLAGER_SPAWN_EGG);
      p_260158_.accept(Items.VINDICATOR_SPAWN_EGG);
      p_260158_.accept(Items.WANDERING_TRADER_SPAWN_EGG);
      p_260158_.accept(Items.WARDEN_SPAWN_EGG);
      p_260158_.accept(Items.WITCH_SPAWN_EGG);
      p_260158_.accept(Items.WITHER_SKELETON_SPAWN_EGG);
      p_260158_.accept(Items.WOLF_SPAWN_EGG);
      p_260158_.accept(Items.ZOGLIN_SPAWN_EGG);
      p_260158_.accept(Items.ZOMBIE_SPAWN_EGG);
      p_260158_.accept(Items.ZOMBIE_HORSE_SPAWN_EGG);
      p_260158_.accept(Items.ZOMBIE_VILLAGER_SPAWN_EGG);
      p_260158_.accept(Items.ZOMBIFIED_PIGLIN_SPAWN_EGG);
   }).build();
   public static final CreativeModeTab OP_BLOCKS = CreativeModeTab.builder(CreativeModeTab.Row.BOTTOM, 5).title(Component.translatable("itemGroup.op")).icon(() -> {
      return new ItemStack(Items.COMMAND_BLOCK);
   }).alignedRight().displayItems((p_259636_, p_259930_, p_259506_) -> {
      if (p_259506_) {
         p_259930_.accept(Items.COMMAND_BLOCK);
         p_259930_.accept(Items.CHAIN_COMMAND_BLOCK);
         p_259930_.accept(Items.REPEATING_COMMAND_BLOCK);
         p_259930_.accept(Items.COMMAND_BLOCK_MINECART);
         p_259930_.accept(Items.JIGSAW);
         p_259930_.accept(Items.STRUCTURE_BLOCK);
         p_259930_.accept(Items.STRUCTURE_VOID);
         p_259930_.accept(Items.BARRIER);
         p_259930_.accept(Items.DEBUG_STICK);

         for(int i = 15; i >= 0; --i) {
            p_259930_.accept(LightBlock.setLightOnStack(new ItemStack(Items.LIGHT), i));
         }
      }

   }).build();
   public static final CreativeModeTab INVENTORY = CreativeModeTab.builder(CreativeModeTab.Row.BOTTOM, 6).title(Component.translatable("itemGroup.inventory")).icon(() -> {
      return new ItemStack(Blocks.CHEST);
   }).backgroundSuffix("inventory.png").hideTitle().alignedRight().type(CreativeModeTab.Type.INVENTORY).noScrollBar().build();
   private static final List<CreativeModeTab> TABS = checkTabs(BUILDING_BLOCKS, COLORED_BLOCKS, NATURAL_BLOCKS, FUNCTIONAL_BLOCKS, REDSTONE_BLOCKS, HOTBAR, SEARCH, TOOLS_AND_UTILITIES, COMBAT, FOOD_AND_DRINKS, INGREDIENTS, SPAWN_EGGS, OP_BLOCKS, INVENTORY);
   private static final List<CreativeModeTab> DEFAULT_TABS = com.google.common.collect.ImmutableList.of(HOTBAR, SEARCH, OP_BLOCKS, INVENTORY);
   @Nullable
   public static FeatureFlagSet CACHED_ENABLED_FEATURES;
   public static boolean CACHED_HAS_PERMISSIONS = false;
   private static final List<CreativeModeTab> FORGE_TABS_VIEW = net.minecraftforge.common.util.ConcatenatedListView.of(net.minecraftforge.common.CreativeModeTabRegistry.getSortedCreativeModeTabs(), DEFAULT_TABS);

   private static List<CreativeModeTab> checkTabs(CreativeModeTab... p_259856_) {
      if (true)
         return List.of(p_259856_); // Forge: We do not validate vanilla tabs here, we have our own mechanism for that. This should only be invoked when the field TABS is initialized, whose use-cases are patched out.
      Map<Pair<CreativeModeTab.Row, Integer>, String> map = new HashMap<>();

      for(CreativeModeTab creativemodetab : p_259856_) {
         String s = creativemodetab.getDisplayName().getString();
         String s1 = map.put(Pair.of(creativemodetab.row(), creativemodetab.column()), s);
         if (s1 != null) {
            throw new IllegalArgumentException("Duplicate position: " + s + " vs. " + s1);
         }
      }

      return List.of(p_259856_);
   }

   public static CreativeModeTab getDefaultTab() {
      return net.minecraftforge.common.CreativeModeTabRegistry.getSortedCreativeModeTabs().stream().filter(CreativeModeTab::shouldDisplay).findFirst().orElse(BUILDING_BLOCKS);
   }

   private static void generatePotionEffectTypes(CreativeModeTab.Output p_249919_, Item p_249272_, CreativeModeTab.TabVisibility p_251809_) {
      for(Potion potion : BuiltInRegistries.POTION) {
         if (potion != Potions.EMPTY) {
            p_249919_.accept(PotionUtils.setPotion(new ItemStack(p_249272_), potion), p_251809_);
         }
      }

   }

   private static void generateEnchantmentBookTypesOnlyMaxLevel(CreativeModeTab.Output p_249134_, Set<EnchantmentCategory> p_251824_, CreativeModeTab.TabVisibility p_250904_) {
      for(Enchantment enchantment : BuiltInRegistries.ENCHANTMENT) {
         if (enchantment.allowedInCreativeTab(Items.ENCHANTED_BOOK, p_251824_)) {
            p_249134_.accept(EnchantedBookItem.createForEnchantment(new EnchantmentInstance(enchantment, enchantment.getMaxLevel())), p_250904_);
         }
      }

   }

   private static void generateEnchantmentBookTypesAllLevels(CreativeModeTab.Output p_249319_, Set<EnchantmentCategory> p_249855_, CreativeModeTab.TabVisibility p_251772_) {
      for(Enchantment enchantment : BuiltInRegistries.ENCHANTMENT) {
         if (enchantment.allowedInCreativeTab(Items.ENCHANTED_BOOK, p_249855_)) {
            for(int i = enchantment.getMinLevel(); i <= enchantment.getMaxLevel(); ++i) {
               p_249319_.accept(EnchantedBookItem.createForEnchantment(new EnchantmentInstance(enchantment, i)), p_251772_);
            }
         }
      }

   }

   private static void generateInstrumentTypes(CreativeModeTab.Output p_251188_, Item p_250699_, TagKey<Instrument> p_251969_, CreativeModeTab.TabVisibility p_251099_) {
      for(Holder<Instrument> holder : BuiltInRegistries.INSTRUMENT.getTagOrEmpty(p_251969_)) {
         p_251188_.accept(InstrumentItem.create(p_250699_, holder), p_251099_);
      }

   }

   private static void generateSuspiciousStews(CreativeModeTab.Output p_259484_, CreativeModeTab.TabVisibility p_260051_) {
      List<SuspiciousEffectHolder> list = SuspiciousEffectHolder.getAllEffectHolders();
      Set<ItemStack> set = ItemStackLinkedSet.createTypeAndTagSet();

      for(SuspiciousEffectHolder suspiciouseffectholder : list) {
         ItemStack itemstack = new ItemStack(Items.SUSPICIOUS_STEW);
         SuspiciousStewItem.saveMobEffect(itemstack, suspiciouseffectholder.getSuspiciousEffect(), suspiciouseffectholder.getEffectDuration());
         set.add(itemstack);
      }

      p_259484_.acceptAll(set, p_260051_);
   }

   private static void generateFireworksAllDurations(CreativeModeTab.Output p_259586_, CreativeModeTab.TabVisibility p_259372_) {
      for(byte b0 : FireworkRocketItem.CRAFTABLE_DURATIONS) {
         ItemStack itemstack = new ItemStack(Items.FIREWORK_ROCKET);
         FireworkRocketItem.setDuration(itemstack, b0);
         p_259586_.accept(itemstack, p_259372_);
      }

   }

   public static List<CreativeModeTab> tabs() {
      return FORGE_TABS_VIEW.stream().filter(CreativeModeTab::shouldDisplay).toList();
   }

   public static List<CreativeModeTab> allTabs() {
      return FORGE_TABS_VIEW;
   }

   public static CreativeModeTab searchTab() {
      return SEARCH;
   }

   private static void buildAllTabContents(FeatureFlagSet p_259307_, boolean p_260177_) {
      allTabs().stream().filter((p_259647_) -> {
         return p_259647_.getType() == CreativeModeTab.Type.CATEGORY;
      }).forEach((p_259425_) -> {
         p_259425_.buildContents(p_259307_, p_260177_);
      });
      allTabs().stream().filter((p_260124_) -> {
         return p_260124_.getType() != CreativeModeTab.Type.CATEGORY;
      }).forEach((p_259952_) -> {
         p_259952_.buildContents(p_259307_, p_260177_);
      });
   }

   private static boolean wouldRebuildSameContents(FeatureFlagSet p_259114_, boolean p_260236_) {
      return CACHED_HAS_PERMISSIONS == p_260236_ && p_259114_.equals(CACHED_ENABLED_FEATURES);
   }

   public static boolean tryRebuildTabContents(FeatureFlagSet p_259432_, boolean p_259893_) {
      if (wouldRebuildSameContents(p_259432_, p_259893_)) {
         return false;
      } else {
         CACHED_ENABLED_FEATURES = p_259432_;
         CACHED_HAS_PERMISSIONS = p_259893_;
         buildAllTabContents(CACHED_ENABLED_FEATURES, CACHED_HAS_PERMISSIONS);
         return true;
      }
   }

   public static List<CreativeModeTab> defaultTabs() {
      return DEFAULT_TABS;
   }
}
